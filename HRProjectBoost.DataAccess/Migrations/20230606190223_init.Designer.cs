// <auto-generated />
using System;
using HRProjectBoost.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HRProjectBoost.DataAccess.Migrations
{
    [DbContext(typeof(HRProjectContext))]
    [Migration("20230606190223_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HRProjectBoost.Entities.Domains.Advance", b =>
                {
                    b.Property<int>("AdvanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdvanceId"), 1L, 1);

                    b.Property<DateTime>("AdvanceAnsweredTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AdvanceCreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("AdvanceStatus")
                        .HasColumnType("int");

                    b.Property<int>("AdvanceType")
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("AdvanceId");

                    b.HasIndex("AppUserId");

                    b.ToTable("Advance");
                });

            modelBuilder.Entity("HRProjectBoost.Entities.Domains.Allowance", b =>
                {
                    b.Property<int>("AllowanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllowanceId"), 1L, 1);

                    b.Property<DateTime>("AllowanceAnswerTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AllowanceCreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("AllowanceStatus")
                        .HasColumnType("int");

                    b.Property<int>("AllowanceType")
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasKey("AllowanceId");

                    b.HasIndex("AppUserId");

                    b.ToTable("Allowance");
                });

            modelBuilder.Entity("HRProjectBoost.Entities.Domains.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "120f669a-4e23-40bb-816c-76802c6dafa4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "f41388bc-3b36-4375-ae12-8cbdc0672335",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "e401ff10-5b1b-473b-887e-95bc43bef42d",
                            Name = "Personnel",
                            NormalizedName = "PERSONNEL"
                        });
                });

            modelBuilder.Entity("HRProjectBoost.Entities.Domains.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "İstanbul/Maltepe",
                            BirthCity = "Admin",
                            BirthDate = new DateTime(2023, 6, 6, 22, 2, 22, 655, DateTimeKind.Local).AddTicks(1789),
                            CompanyInfo = "Admin",
                            ConcurrencyStamp = "22647234-0eb2-4df9-83b9-3a69ef60a6d6",
                            Department = 2,
                            Email = "admin.admin@bilgeadamboost.com",
                            EmailConfirmed = true,
                            EndDate = new DateTime(2023, 6, 6, 22, 2, 22, 655, DateTimeKind.Local).AddTicks(1791),
                            IdentityNumber = "12345678998",
                            Job = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMİN.ADMİN@BİLGEADAMBOOST.COM",
                            NormalizedUserName = "ADMİN",
                            Password = "123456aA-",
                            PasswordHash = "AQAAAAEAACcQAAAAELviw1b7Bx2alKL6I1BkN5RqZsAkprEODflLrcFEBWJHlNSgkijBQIl+3KNGFaWV4w==",
                            PhoneNumber = "12345678901",
                            PhoneNumberConfirmed = true,
                            Salary = 16500m,
                            SecondLastName = "Admin",
                            SecondName = "Admin",
                            SecurityStamp = "3f170189-5b5c-4a1d-a2d1-647647303a88",
                            StartDate = new DateTime(2023, 6, 6, 22, 2, 22, 655, DateTimeKind.Local).AddTicks(1790),
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "İstanbul/Maltepe",
                            BirthCity = "Balıkesir",
                            BirthDate = new DateTime(2023, 6, 6, 22, 2, 22, 655, DateTimeKind.Local).AddTicks(1834),
                            CompanyId = 1,
                            CompanyInfo = "IT",
                            ConcurrencyStamp = "1d6cd435-0572-4191-a4c1-d82e5edafa31",
                            Department = 2,
                            Email = "burakayan@bilgeadamboost.com",
                            EmailConfirmed = true,
                            EndDate = new DateTime(2023, 6, 6, 22, 2, 22, 655, DateTimeKind.Local).AddTicks(1835),
                            IdentityNumber = "41104925332",
                            Job = "Back End Developer",
                            LastName = "Ayan",
                            LockoutEnabled = false,
                            Name = "Burak",
                            NormalizedEmail = "BURAKAYAN@BİLGEADAMBOOST.COM",
                            NormalizedUserName = "BURAK61",
                            Password = "123456aA-",
                            PasswordHash = "AQAAAAEAACcQAAAAEPt5xyc8TW3+NMjJKzWoVtFJqJ6RuUVvmVPkKxPQujnprj86Vn+kftR5k8uGWDPl4A==",
                            PhoneNumber = "905423985612",
                            PhoneNumberConfirmed = true,
                            Salary = 16500m,
                            SecondLastName = "",
                            SecondName = "",
                            SecurityStamp = "788143de-de1f-470e-ab77-c4d348977d3a",
                            StartDate = new DateTime(2023, 6, 6, 22, 2, 22, 655, DateTimeKind.Local).AddTicks(1835),
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "Burak61"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "İstanbul/Maltepe",
                            BirthCity = "Manager",
                            BirthDate = new DateTime(2023, 6, 6, 22, 2, 22, 655, DateTimeKind.Local).AddTicks(1820),
                            CompanyId = 1,
                            CompanyInfo = "Manager",
                            ConcurrencyStamp = "442218a5-0aeb-4f99-bdda-0a284f63a9e9",
                            Department = 2,
                            Email = "manager.manager@bilgeadamboost.com",
                            EmailConfirmed = true,
                            EndDate = new DateTime(2023, 6, 6, 22, 2, 22, 655, DateTimeKind.Local).AddTicks(1822),
                            IdentityNumber = "12345678998",
                            Job = "Manager",
                            LastName = "Manager",
                            LockoutEnabled = false,
                            Name = "Manager",
                            NormalizedEmail = "MANAGER.MANAGER@BİLGEADAMBOOST.COM",
                            NormalizedUserName = "MANAGER",
                            Password = "123456aA-",
                            PasswordHash = "AQAAAAEAACcQAAAAEHa3ON+VFR7V6StYkkxwJECKUZ2xxaTfMRh32cZkPkpYBD7qiPJIWGqqSf7oZwVt8A==",
                            PhoneNumber = "12345678901",
                            PhoneNumberConfirmed = true,
                            Salary = 16500m,
                            SecondLastName = "Manager",
                            SecondName = "Manager",
                            SecurityStamp = "02172e42-968d-4c06-8dd9-435ed2d29b75",
                            StartDate = new DateTime(2023, 6, 6, 22, 2, 22, 655, DateTimeKind.Local).AddTicks(1821),
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "Manager"
                        });
                });

            modelBuilder.Entity("HRProjectBoost.Entities.Domains.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<DateTime>("AgreementEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("AgreementStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyStatus")
                        .HasColumnType("int");

                    b.Property<string>("CompanyTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EstablishDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MersisNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonnelCount")
                        .HasColumnType("int");

                    b.Property<string>("TaxAdministration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            AgreementEndDate = new DateTime(2025, 6, 6, 22, 2, 22, 655, DateTimeKind.Local).AddTicks(1748),
                            AgreementStartDate = new DateTime(2023, 6, 6, 22, 2, 22, 655, DateTimeKind.Local).AddTicks(1746),
                            CompanyAddress = "Adress Deneme",
                            CompanyEmail = "test.company@test.com",
                            CompanyName = "TestCompany",
                            CompanyPhoneNumber = "+9050012312312",
                            CompanyStatus = 1,
                            CompanyTitle = "TC",
                            EstablishDate = new DateTime(2021, 6, 6, 22, 2, 22, 655, DateTimeKind.Local).AddTicks(1733),
                            MersisNo = "123456",
                            TaxAdministration = "DenemeVergiDairesi",
                            TaxNo = "123456"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HRProjectBoost.Entities.Domains.Advance", b =>
                {
                    b.HasOne("HRProjectBoost.Entities.Domains.AppUser", "AppUser")
                        .WithMany("Advances")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HRProjectBoost.Entities.Domains.Allowance", b =>
                {
                    b.HasOne("HRProjectBoost.Entities.Domains.AppUser", "AppUser")
                        .WithMany("Allowances")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HRProjectBoost.Entities.Domains.AppUser", b =>
                {
                    b.HasOne("HRProjectBoost.Entities.Domains.Company", "Company")
                        .WithMany("AppUser")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("HRProjectBoost.Entities.Domains.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HRProjectBoost.Entities.Domains.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HRProjectBoost.Entities.Domains.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("HRProjectBoost.Entities.Domains.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRProjectBoost.Entities.Domains.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HRProjectBoost.Entities.Domains.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRProjectBoost.Entities.Domains.AppUser", b =>
                {
                    b.Navigation("Advances");

                    b.Navigation("Allowances");
                });

            modelBuilder.Entity("HRProjectBoost.Entities.Domains.Company", b =>
                {
                    b.Navigation("AppUser");
                });
#pragma warning restore 612, 618
        }
    }
}
